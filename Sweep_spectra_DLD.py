#!/usr/bin/env python
# -*- coding:utf-8 -*-


# ############################################################################
#  license :
# ============================================================================
#
#  File :        Sweep_spectra_DLD.py
#
#  Project :     Sweep_spectra_DLD
#
# This file is part of Tango device class.
# 
# Tango is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Tango is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Tango.  If not, see <http://www.gnu.org/licenses/>.
# 
#
#  $Author :      sergey.v.babenkov$
#
#  $Revision :    $
#
#  $Date :        $
#
#  $HeadUrl :     $
# ============================================================================
#            This file is generated by POGO
#     (Program Obviously used to Generate tango Object)
# ############################################################################

__all__ = ["Sweep_spectra_DLD", "Sweep_spectra_DLDClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(Sweep_spectra_DLD.additionnal_import) ENABLED START -----#
sys.path.insert(1, '/home/diamond/bin/TangoServers/FUG_HV_supply')
from MCP_140_1250_driver import FUG_MCP
import time
import threading
import numpy as np
import os

#----- PROTECTED REGION END -----#	//	Sweep_spectra_DLD.additionnal_import

# Device States Description
# No states for this device


class Sweep_spectra_DLD (PyTango.Device_4Impl):
    """Sweep_spectra"""
    
    # -------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(Sweep_spectra_DLD.global_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	Sweep_spectra_DLD.global_variables

    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        Sweep_spectra_DLD.init_device(self)
        #----- PROTECTED REGION ID(Sweep_spectra_DLD.__init__) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Sweep_spectra_DLD.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(Sweep_spectra_DLD.delete_device) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Sweep_spectra_DLD.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        self.attr_Sample_V_min_read = 0.0
        self.attr_Voltage_step_read = 0.0
        self.attr_Sample_V_max_read = 0.0
        self.attr_Exposure_read = 0.0
        self.attr_HV_error_read = ""
        self.attr_measurements_error_read = ""
        self.attr_Server_Save_File_Busy_read = False
        self.attr_sp_y_read = [0.0]
        self.attr_sp_x_read = [0.0]
        #----- PROTECTED REGION ID(Sweep_spectra_DLD.init_device) ENABLED START -----#
        self.Save_Filecounter=0
        self.Save_Directory=""
        self.Save_Filename=""         
        self.steps=0
        self.resize_spectrum_trig=False
        if not 'resize_thread' in dir(self):
            self.resize_thread = threading.Thread(target=self.resize_spectrum)
            self.resize_thread.setDaemon(True)
            self.resize_thread.start()
        #----- PROTECTED REGION END -----#	//	Sweep_spectra_DLD.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(Sweep_spectra_DLD.always_executed_hook) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Sweep_spectra_DLD.always_executed_hook

    # -------------------------------------------------------------------------
    #    Sweep_spectra_DLD read/write attribute methods
    # -------------------------------------------------------------------------
    
    def read_Sample_V_min(self, attr):
        self.debug_stream("In read_Sample_V_min()")
        #----- PROTECTED REGION ID(Sweep_spectra_DLD.Sample_V_min_read) ENABLED START -----#
        attr.set_value(self.attr_Sample_V_min_read)
        
        #----- PROTECTED REGION END -----#	//	Sweep_spectra_DLD.Sample_V_min_read
        
    def write_Sample_V_min(self, attr):
        self.debug_stream("In write_Sample_V_min()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Sweep_spectra_DLD.Sample_V_min_write) ENABLED START -----#
        self.attr_Sample_V_min_read=data
        #----- PROTECTED REGION END -----#	//	Sweep_spectra_DLD.Sample_V_min_write
        
    def read_Voltage_step(self, attr):
        self.debug_stream("In read_Voltage_step()")
        #----- PROTECTED REGION ID(Sweep_spectra_DLD.Voltage_step_read) ENABLED START -----#
        attr.set_value(self.attr_Voltage_step_read)
        
        #----- PROTECTED REGION END -----#	//	Sweep_spectra_DLD.Voltage_step_read
        
    def write_Voltage_step(self, attr):
        self.debug_stream("In write_Voltage_step()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Sweep_spectra_DLD.Voltage_step_write) ENABLED START -----#
        self.attr_Voltage_step_read=data
        #----- PROTECTED REGION END -----#	//	Sweep_spectra_DLD.Voltage_step_write
        
    def read_Sample_V_max(self, attr):
        self.debug_stream("In read_Sample_V_max()")
        #----- PROTECTED REGION ID(Sweep_spectra_DLD.Sample_V_max_read) ENABLED START -----#
        attr.set_value(self.attr_Sample_V_max_read)
        
        #----- PROTECTED REGION END -----#	//	Sweep_spectra_DLD.Sample_V_max_read
        
    def write_Sample_V_max(self, attr):
        self.debug_stream("In write_Sample_V_max()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Sweep_spectra_DLD.Sample_V_max_write) ENABLED START -----#
        self.attr_Sample_V_max_read=data
        #----- PROTECTED REGION END -----#	//	Sweep_spectra_DLD.Sample_V_max_write
        
    def read_Exposure(self, attr):
        self.debug_stream("In read_Exposure()")
        #----- PROTECTED REGION ID(Sweep_spectra_DLD.Exposure_read) ENABLED START -----#
        attr.set_value(self.attr_Exposure_read)
        
        #----- PROTECTED REGION END -----#	//	Sweep_spectra_DLD.Exposure_read
        
    def write_Exposure(self, attr):
        self.debug_stream("In write_Exposure()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Sweep_spectra_DLD.Exposure_write) ENABLED START -----#
        self.attr_Exposure_read=data
        
        #----- PROTECTED REGION END -----#	//	Sweep_spectra_DLD.Exposure_write
        
    def read_HV_error(self, attr):
        self.debug_stream("In read_HV_error()")
        #----- PROTECTED REGION ID(Sweep_spectra_DLD.HV_error_read) ENABLED START -----#
        self.attr_HV_error_read=self.HV_PS.error        
        attr.set_value(self.attr_HV_error_read)
        
        #----- PROTECTED REGION END -----#	//	Sweep_spectra_DLD.HV_error_read
        
    def read_measurements_error(self, attr):
        self.debug_stream("In read_measurements_error()")
        #----- PROTECTED REGION ID(Sweep_spectra_DLD.measurements_error_read) ENABLED START -----#
        attr.set_value(self.attr_measurements_error_read)
        
        #----- PROTECTED REGION END -----#	//	Sweep_spectra_DLD.measurements_error_read
        
    def write_Save_Filecounter(self, attr):
        self.debug_stream("In write_Save_Filecounter()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Sweep_spectra_DLD.Save_Filecounter_write) ENABLED START -----#
        self.Save_Filecounter=data
        #----- PROTECTED REGION END -----#	//	Sweep_spectra_DLD.Save_Filecounter_write
        
    def write_Save_Directory(self, attr):
        self.debug_stream("In write_Save_Directory()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Sweep_spectra_DLD.Save_Directory_write) ENABLED START -----#
        self.Save_Directory=data
        #----- PROTECTED REGION END -----#	//	Sweep_spectra_DLD.Save_Directory_write
        
    def write_Save_Filename(self, attr):
        self.debug_stream("In write_Save_Filename()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Sweep_spectra_DLD.Save_Filename_write) ENABLED START -----#
        self.Save_Filename=data
        #----- PROTECTED REGION END -----#	//	Sweep_spectra_DLD.Save_Filename_write
        
    def write_CmdTrig_Save_spectrum(self, attr):
        self.debug_stream("In write_CmdTrig_Save_spectrum()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Sweep_spectra_DLD.CmdTrig_Save_spectrum_write) ENABLED START -----#
        self.SaveSpectrum()
        #----- PROTECTED REGION END -----#	//	Sweep_spectra_DLD.CmdTrig_Save_spectrum_write
        
    def read_Server_Save_File_Busy(self, attr):
        self.debug_stream("In read_Server_Save_File_Busy()")
        #----- PROTECTED REGION ID(Sweep_spectra_DLD.Server_Save_File_Busy_read) ENABLED START -----#
        attr.set_value(self.attr_Server_Save_File_Busy_read)
        
        #----- PROTECTED REGION END -----#	//	Sweep_spectra_DLD.Server_Save_File_Busy_read
        
    def write_resize_spectrum_array(self, attr):
        self.debug_stream("In write_resize_spectrum_array()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Sweep_spectra_DLD.resize_spectrum_array_write) ENABLED START -----#
        self.resize_spectrum_trig=True
        #----- PROTECTED REGION END -----#	//	Sweep_spectra_DLD.resize_spectrum_array_write
        
    def read_sp_y(self, attr):
        self.debug_stream("In read_sp_y()")
        #----- PROTECTED REGION ID(Sweep_spectra_DLD.sp_y_read) ENABLED START -----#
        print len(self.attr_sp_y_read),self.attr_sp_y_read        
        attr.set_value(self.attr_sp_y_read)
        
        #----- PROTECTED REGION END -----#	//	Sweep_spectra_DLD.sp_y_read
        
    def read_sp_x(self, attr):
        self.debug_stream("In read_sp_x()")
        #----- PROTECTED REGION ID(Sweep_spectra_DLD.sp_x_read) ENABLED START -----#
        print len(self.attr_sp_x_read),self.attr_sp_x_read        
        attr.set_value(self.attr_sp_x_read)

        #----- PROTECTED REGION END -----#	//	Sweep_spectra_DLD.sp_x_read
        
    
    
    
            
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(Sweep_spectra_DLD.read_attr_hardware) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Sweep_spectra_DLD.read_attr_hardware


    # -------------------------------------------------------------------------
    #    Sweep_spectra_DLD command methods
    # -------------------------------------------------------------------------
    

    #----- PROTECTED REGION ID(Sweep_spectra_DLD.programmer_methods) ENABLED START -----#
    def resize_spectrum(self):
        while True:
            if self.resize_spectrum_trig==True:
                if len(self.attr_sp_x_read)>1:
                    self.attr_sp_x_read=[0.0]#np.delete(self.attr_sp_x_read,[1:],0)
                    self.attr_sp_y_read=[0.0]#np.delete(self.attr_sp_y_read,[1:],0)
                i=0
                self.resize_spectrum_trig=False
                self.attr_sp_x_read[0]=self.attr_Sample_V_min_read
                while self.attr_Sample_V_min_read+i*self.attr_Voltage_step_read<self.attr_Sample_V_max_read:
                    print self.attr_Sample_V_min_read+i*self.attr_Voltage_step_read                    
                    i+=1
                    self.attr_sp_x_read=np.append(self.attr_sp_x_read,(self.attr_Sample_V_min_read+i*self.attr_Voltage_step_read))
                    self.attr_sp_y_read=np.append(self.attr_sp_y_read,i)
            else:
                time.sleep(1)
    def SaveSpectrum(self):
        now=time.strftime("%Y_%m_%d", time.gmtime())
        self.attr_Server_Save_File_Busy_read=True
        if self.Save_Directory=="" or self.Save_Filename=="":
            self.attr_measurements_error_read="Check file path!"
        else:
            dir_path=self.Save_Directory+"/"+now
            if os.path.isdir(dir_path)==False:
                os.mkdir(dir_path)
            else:
                file_path=dir_path+"/"+str(self.Save_Filecounter)+"_"+self.Save_Filename+".txt"
                print (file_path)                
                if os.path.isfile(file_path)==False and self.start_trigger==False:
                    np.savetxt(file_path, np.c_[self.attr_sp_x_read, self.attr_sp_y_read])
                    #with open(path+filename, 'a') as text_file:
                    #    text_file.write('{}     {}\n'.format(str(datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")), Pressure))
                elif self.start_trigger==True:
                    self.attr_measurements_error_read="Measurements in progress!"
                else:
                    self.attr_measurements_error_read="File already exists!"

        self.attr_Server_Save_File_Busy_read=False

                
    #----- PROTECTED REGION END -----#	//	Sweep_spectra_DLD.programmer_methods

class Sweep_spectra_DLDClass(PyTango.DeviceClass):
    # -------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(Sweep_spectra_DLD.global_class_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	Sweep_spectra_DLD.global_class_variables


    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        }


    #    Command definitions
    cmd_list = {
        }


    #    Attribute definitions
    attr_list = {
        'Sample_V_min':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized':"true"
            } ],
        'Voltage_step':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized':"true"
            } ],
        'Sample_V_max':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized':"true"
            } ],
        'Exposure':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized':"true"
            } ],
        'HV_error':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ]],
        'measurements_error':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ]],
        'Save_Filecounter':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.WRITE],
            {
                'Memorized':"true"
            } ],
        'Save_Directory':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.WRITE],
            {
                'Memorized':"true"
            } ],
        'Save_Filename':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.WRITE],
            {
                'Memorized':"true"
            } ],
        'CmdTrig_Save_spectrum':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'Server_Save_File_Busy':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        'resize_spectrum_array':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'sp_y':
            [[PyTango.DevDouble,
            PyTango.SPECTRUM,
            PyTango.READ, 10000]],
        'sp_x':
            [[PyTango.DevDouble,
            PyTango.SPECTRUM,
            PyTango.READ, 10000]],
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(Sweep_spectra_DLDClass, Sweep_spectra_DLD, 'Sweep_spectra_DLD')
        #----- PROTECTED REGION ID(Sweep_spectra_DLD.add_classes) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Sweep_spectra_DLD.add_classes

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed as e:
        print ('-------> Received a DevFailed exception:', e)
    except Exception as e:
        print ('-------> An unforeseen exception occured....', e)

if __name__ == '__main__':
    main()
